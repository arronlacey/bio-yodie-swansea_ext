
import gate.*
import gate.trendminer.lodie.utils.LodieUtils



def cli = new CliBuilder(
  usage: 'autogenerate-ranking-jape.sh rankingJape featSpec docsDir')
cli.h(longOpt:"help", "Show usage information")

def options = cli.parse(args)

if(options.h) {
  cli.usage()
  System.out.println("rankingJape: the JAPE script that puts rank features on document as part of ML training/application.")
  System.out.println("featSpec: the autogenerated ML feature spec, to be edited for use.")
  System.out.println("docsDir: the directory of YODIE-processed documents to use to gather scores to be ranked.")
  return
}


def posArgs = options.arguments()

if(!(posArgs.size() == 3)) {
  cli.usage()
  System.exit(1)
}

File rankingJape = new File(posArgs[0])
if(!rankingJape.exists()) {
  rankingJape.createNewFile()
}

File featSpec = new File(posArgs[1])
if(!featSpec.exists()) {
  featSpec.createNewFile()
}

File docDir = new File(posArgs[2])
if(!docDir.exists()) {
  System.err.println("Corpus directory does not exist: "+docDir)
  System.exit(1)
}

// 1) set up GATE
String gatehome= System.getenv()['GATE_HOME']
if(gatehome == null) {
  System.err.println("Environment variable GATE_HOME not set!")
  System.exit(1);
}
Gate.setGateHome(new File(gatehome))
Gate.runInSandbox(true)
Gate.init()

String outFormat="finf"
if(options.o) {
  if(options.o == "xml") {
    outFormat = "xml"
  } else if(options.o != "finf") {
    System.err.println("Output format must be xml or finf, not "+options.o)
    System.exit(1)
  }
}
gate.Utils.loadPlugin("Format_FastInfoset")
def docFormat = null
if(outFormat == "finf") {  
  docFormat = gate.DocumentFormat.getDocumentFormat(new gate.corpora.MimeType("application","fastinfoset"))
}  

featurenames = new HashSet<String>()

// 5) iterate over the documents in the directory
// for now, we only read files with an .xml or .finf extension
def extFilter = ~/.+\.(?:xml|finf)/
int counter = 0
docDir.traverse(type: groovy.io.FileType.FILES, nameFilter: extFilter) { file ->
 if(counter<20){ //We only need a sample
  // create a document from that file
  String fileName = file.getName()
  FeatureMap parms = Factory.newFeatureMap();
  parms.put(Document.DOCUMENT_ENCODING_PARAMETER_NAME, "UTF-8")
  parms.put("sourceUrl", file.toURI().toURL())
  Document doc = (Document) gate.Factory.createResource("gate.corpora.DocumentImpl", parms);
  doc.setName(fileName)

  AnnotationSet lookups = doc.getAnnotations().get("Lookup")

  for(lookup in lookups){
   for(featurename in lookup.getFeatures().keySet()){
    featurenames.add(featurename)
   }
  }
 }
 counter++
}

//Now that we know the features, we can autogenerate the ranking script to run with the ML

rankingJape.write("")

rankingJape << "Phase: CreateRankFeatures\n"
rankingJape << "Input: LookupList\n"
rankingJape << "Options: control = all debug = true\n" 
rankingJape << "\n"
rankingJape << "Rule: CreateAllRankFeatures\n"
rankingJape << "(\n"
rankingJape << " {LookupList}\n"
rankingJape << ")\n"
rankingJape << ":match\n"
rankingJape << "-->\n"
rankingJape << "{\n"
rankingJape << "\n"
rankingJape << " AnnotationSet matches = bindings.get(\"match\");\n"
rankingJape << " Annotation ll = matches.iterator().next();\n"
rankingJape << "\n"

for(fn in featurenames){
 if(fn.substring(0,2).equals("sc") && Character.isUpperCase(fn.charAt(2))){
  rankingJape << " gate.trendminer.lodie.utils.LodieUtils.addRankFeature"
  rankingJape << "(\"" + fn + "\", ll, inputAS, false);\n"
 }
}

rankingJape << "\n}\n"

//Let's also suggest an ML config file

featSpec.write("")

featSpec << "<ML-CONFIG>\n\n"

for(fn in featurenames){
 if(fn.substring(0,2).equals("sc") && Character.isUpperCase(fn.charAt(2))){
   featSpec << "<ATTRIBUTE>\n"
   featSpec << "<FEATURE>" + fn + "</FEATURE>\n"
   featSpec << "<DATATYPE>numeric</DATATYPE>\n"
   featSpec << "</ATTRIBUTE>\n\n"
   
   //Add the rank feature as well for scores, since it will be there at runtime.
   featSpec << "<ATTRIBUTE>\n"
   featSpec << "<FEATURE>" + fn + "Rank</FEATURE>\n"
   featSpec << "<DATATYPE>numeric</DATATYPE>\n"
   featSpec << "</ATTRIBUTE>\n\n"
 } else if(fn.substring(0,2).equals("nm") && Character.isUpperCase(fn.charAt(2))){
   featSpec << "<ATTRIBUTE>\n"
   featSpec << "<FEATURE>" + fn + "</FEATURE>\n"
   featSpec << "<DATATYPE>nominal</DATATYPE>\n"
   featSpec << "</ATTRIBUTE>\n\n"
 }
}

featSpec << "\n</ML-CONFIG>\n"
